@using EasyLearning.WebUI.Areas.adminsecured.Models;
@using EasyLearning.Domain.Entity;
@model UserCreateModel

@{
    ViewBag.Title = "Add Lecturer";
    ActionModel action = ViewBag.Action;
}

<section class="content-header">
    <h1>
        Add @action.Current
        <small>New</small>
    </h1>
</section>

<section class="content">
    @using (Html.BeginForm(action.Action, action.Controller, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.AppUserID)
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @if (TempData["error"] != null)
            {
                <div class="alert alert-danger alert-dismissable">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                    <h4><i class="icon fa fa-ban"></i> Alert!</h4>
                    @TempData["error"]
                </div>
            }
            <div class="col-sm-offset-2 col-md-offset-2 col-sm-4 col-md-4">
                    @* Last Name *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.LastName)
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                        <span class="glyphicon glyphicon-align-left form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>

                    @* First Name *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.FirstName)
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                        <span class="glyphicon glyphicon-th form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>

                    @* Middle Name *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.MiddleName)
                        @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "Middle Name" } })
                        <span class="glyphicon glyphicon-th-list form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                    </div>

                    @* username *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.username)
                        @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control", placeholder = "username" } })
                        <span class="glyphicon glyphicon-user form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
                    </div>

                    @* date of birth *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.DateOfBirth)
                        @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control", placeholder = "Date of Birth" } })
                        <span class="glyphicon glyphicon-time form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                    </div>

                    @* Gender *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Gender)
                        @Html.DropDownList("Gender", new SelectList(Enum.GetNames(typeof(Sex))), "your Gender")
                        @*<span class="glyphicon glyphicon-align-left form-control-feedback"></span>*@
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>

                    @* State *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.State)
                        @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", placeholder = "state" } })
                        <span class="glyphicon glyphicon-record form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>

                    @* Phone *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.PhoneNumber)
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "phone number" } })
                        <span class="glyphicon glyphicon-phone form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-4 col-md-4">

                    @* For Student *@
                    @if (action.Current == "Student")
                    {
                        <div class="form-group has-feedback">
                            @Html.Label("Level")
                            @Html.DropDownList("Level", new SelectList(Enum.GetNames(typeof(Level))), "Select Level" ,new { @class = "form-control"})
                        </div>
                    }

                    @* Image *@
                    <div class="form-group">
                        <p class="help-block">Must be an Image type</p>
                        <div class="btn btn-default btn-file">
                            <i class="fa fa-picture-o"></i>@action.Current's Image
                            <input type="file" name="image">
                        </div>
                    </div>

                    @* Department *@
                    <div class="form-group has-feedback">
                        @Html.Label("Department")
                        @Html.DropDownList("DepartmentID", null, "Select A Department", new { @class = "form-control" })
                        @*<span class="glyphicon glyphicon-align-left form-control-feedback"></span>*@
                        @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                    </div>

                    @* email *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Email)
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email" } })
                        <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>


                    @* Password *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.Password)
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = "password" } })
                        <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>

                    @* Confirm *@
                    <div class="form-group has-feedback">
                        @Html.LabelFor(x => x.ComparePassword)
                        @Html.EditorFor(model => model.ComparePassword, new { htmlAttributes = new { @class = "form-control", placeholder = "confirm password" } })
                        <span class="glyphicon glyphicon-lock form-control-feedback"></span>
                        @Html.ValidationMessageFor(model => model.ComparePassword, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary btn-flat">Submit</button>
                        <a href="@Url.Action("lecturers", new { id = "" })" class="btn btn-danger btn-flat">Cancel</a>
                    </div>
                </div>
            </div>
    }
</section>
@section scripts{
   @Scripts.Render("~/bundles/jqueryval")
}